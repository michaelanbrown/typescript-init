Basic TypeScript Types:

- Boolean
- Number
- String
    - Template Strings
- Array
- Enums (Enumerations)

----------------------------------

Declarations with let and const:

console.log(someString);
var someString = 'Hello World';

console.log(someString);
let someString = 'Hello World';
**Variables declared with let may not be used prior to declaration so this will throw an error

let someString = 'Hello World';
console.log(someString);

const someString = 'Hello World';
console.log(someString);

----------------------------------

Type Annotations and Type Inference

let x: string = 'I will forever be a string.';
**Now that the variable is declared a string, that is the only type it can ever be.
If trying to assign a different type (i.e. x = 42;) you will get a compiler error.

**Annotations are added by placing a colon after the variable, followed by the type you want the variable to be.
**You are not required to add type annotations to your declarations

let y = 'I will also forever be a string.';
**There is not type annotation but the variable will infer the type based on its initial value.
If trying to assign a different type (i.e. y = 42;) you will get a compiler error.

**Using annotations is more of a coding style because no matter what TypeScript will infer the type.
You should use them for code clarity such as when a variable is a function and you do not know what the outcome of the function will be initially. (i.e. let z = GetSomeValue();)
let z: number = GetSomeValue();

----------------------------------

Additional Types

- Void (absence of a type)
- Null
- Undefined
- Null and Undefined can be excluded from certain types
- Never (Values that will never occur - ex: functions that will never return because they are continuous or throw an error)
- Any (Can assign any type of value to it)

----------------------------------

Union Types

Can unionize as many type as you want

let someValue: number | string;
someValue = 42;
someValue = 'Hello World';
someValue = true will throw a complier error
**Can be a number or a string

----------------------------------

Using the --strictNullChecks Compiler Option

- By default null and undefined can be used with any type but this leads to lots of bugs, that can be avoided with using this option in TypeScript
- With this option set to true null and undefined are no longer valid values for any other type
- You must allow them by setting a union type to null and undefined
Assume we're using the strictNullChecks option:

let basicString: string;
basicString = null; (complier error)
basicString = undefined; (complier error)

let nullableString: string | null;
nullableString = null;
nullableString = undefined; (complier error)

let mysteryString = string | null | undefined;
mysteryString = null;
mysteryString = undefined;

----------------------------------

Arrays

- Arrays can be declared two diferent ways
- The type declared is the type being stored in the array
- If you want different types to be used in the array then declare the type as any
    - let anyArray: any[] = [42, true, 'banana'];
    - Should avoid using the any type declaration because it voids the benefits of using types
- Accessed and used much like JavaScript (methods in JS are available in TS)

1.
let strArray1: string[]= ['here', 'are', 'strings'];

2.
let strArray2: Array<string> = ['more', 'strings', 'here'];

----------------------------------

Controlling Program Flow

- For loop (similar to JS)
- While loops (similar to JS)
- Switch (similar to JS)

----------------------------------

Understanding Control Flow Type Analysis

- When declaring a function, parameters and the return should have type declarations
function ExampleFunction(title: string) : string | number {
    code
}

----------------------------------

--noImplicitAny Compiler Option

- Without type annotations the function parameters are implicitly assigned the any type which turns off type checking for that variable or parameter
- If you want to avoid accidentally using the any type then you can usee the --noImplicitAny compiler option (this will throw an error)
    - You can still explicitly use the any type, but cannot implicitly use it

- Compilers will use the any type for parameters as it cannot accurately predict the type of parameters

----------------------------------

Optional and Default Parameters

- In JS all function parameters are optional, but in TS all parameters are required
Optional:
    - But can mark a parameter as optional using the ?
    - Optional parameters must be last when declaring parameters
      function CreateCustomer(name: string, age?: number) {}
Default:
    - Default parameters let you specifiy a default value to use for optional or required parameters
    - Default parameters are treated as optional if they appear after all other parameters
    Can be a literal value or a function expression
      function GetBookByTitle(title: string = 'The C Programming Language') {} OR
      function GetBookByTitle(title: string = GetMostPopularBook()) {}
Rest Parameters:
    - Rest parameters give you a mechanism for passing a variable number of additional parameters after those specifically required in the function definition
    - Think of them as the rest of the parameters the function expects
    - Rest parameters are denoted with an ellipsis (...) prefix on the parameter name
      function GetBooksReadForCust(name: string, ...bookIds: number[]) {}
      let books = GetBooksReadForCust('Leigh', 2, 5);
        - bookIds is declared as a number array
        - The number array will contain 2 and 5
      let books = GetBooksReadForCust('Daniel', 2, 5, 12, 42);
        - The number array will contain 2, 5, 12, and 42

----------------------------------

Arrow Functions
- let squareit = x => x * x
    let result = squareit(4); //16
- let adder = (a, b) => a + b;
    let sum = adder(2, 3); //5
- let greeting = () => console.log ('Hello World!');
    greeting(); //Hello World!

- let scores: number[] = [70, 125, 85, 110];
    let highScores: number[];
    highScores = scores.filter((element, index, array) => {
        if (element > 100) {
            return true;
        }
    });

----------------------------------

Function Overloads

- Function overload means that you create multiple functions that have the same name, but differ in their signature somehow

- One symbol name
- Multiple function types
- One implementation with type guards

- Because the type annotations are removed when the code compiles, JavaScript functions with the same name will cause a problem
    - In order to overload functions in TypeScript you will provide multiple function signatures, but only one implementation (must use type guards to determine which overload was called and what actin to perform)


----------------------------------

Taking Advantage of Function Types

- Functions as a whole also have types, not just the parameters and return values
    - It's a combination of parameter types and the return type
    - function ReleaseMessage(year: number): string {
        return 'Year released: ' + year;
    }
- The syntax for specifying a function type is to enclose the parameters and their types in parenthesis on the left side of an arrow and the return type of the function on the right side of the arrow. (Be careful of confusing this with arrow functions)
    - Ex:
        let releaseFunc: (someYear: number) => string;
- Once a variable has been decalred and given that type, it can be assigned the function above, since the function shares the same type
     - let message: string = releaseFunc(2024)
- If the type of the function does not match the type in the variable declarartion, it will return a compiler error from TypeScript
- Once the function has been assigned, it can be called with the variable that was declared

----------------------------------

Working with Interfaces

- Interfaces are defined with the "interface" keyword
- List their properties with their types
- Can specify optional properties with the "?"
- Can provide function signatures - no implementation

interface Book {
    id: number;
    title: string;
    author: string;
    pages?: number;
    markDamaged: (reason: string) => void;
}

- With interfaces you specify the return value with a : instead of =>
    interface ReviewLogger {
        (review: string): void;
    }

- Interfaces don't have an equivalent construct in JavaScript, so when compiling code it will remove the interfaces
    - Interfaces are mostly for developers and for the TypeScript compiler to enforce type checking

----------------------------------

Creating and Using Classes

- Helps developers create their own types
- Class Members:
    - Constructors
    - Properties
    - Methods
- A class is a template for creating objects
- All objects created from the template will have the same properties and methods
- Classes provide state storage and behavior

----------------------------------

Constructors

- Functions that perform initialization for new instances of a class
- A class's constructor looks like any other method except it's named constructor
     - Maximum of one per class
- Some OOP languages allow you to create multiple constructors that differ by the number of parameters they accept, and you can achieve similar goals in TypeScript through the use of optional parameters
- You don't execute the constructor by calling the constructor by name, you use the class name and the new keyword
- Similar to interfaces but different in the sense that constructors provide the actual implementation details
- Accessors:
    - Getter (get)
        - Will always contain and empty set of () after the name
        - Can optionally set a return type
    - Setter (set)
        - Must be passed exactly one parameter
        - Cannot specify a return type
- Static properties are properties on the class itself, not on instances of the class
- Access modifiers are keywords that can be added to property and method definitions to control their visibility for consumers of the class
- By default, akk class members are public, but constructor parameters are not
    - The pulbic keyword is required to delcare a constructor parameter as a class property
    - Can use the private modifier to declare that a class member should only be accessible inside that class
    - Member declared private won't be accessible to consumers of the class or in subclasses
- Private fields are specified by putting the hash # symbol in front of field names
- Members declared as protected will only be available inside the class in which they are declared and any subclasses of that class
    - They're not publicly available on instance objects

----------------------------------

Abstract Classes

- Created by adding the abstract keyword in front of the class definition
- Similar to regular classes but may only be used as base classes from which other classes are derived via inheritance
- Can't directly instantiate abstract classes
- Similar to interfaces but can have implementation details
- Can define abstract methods that are not implemented
    - Abstract methods must be implemented in derived classes